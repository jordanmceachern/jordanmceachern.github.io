{"version":3,"sources":["actions/index.js","components/MapStateToProps.js","components/PageContent.js","../node_modules/@material-ui/icons/Theaters.js","components/MoviesPage.js"],"names":["indices","asyncfuncs","segment","map","index","callback","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","then","response","ok","console","error","statusText","json","handleErrors","data","fetchPeople","dispatch","parallel","err","results","type","payload","fetchPlanets","fetchMovies","MapStateToProps","people","planets","movies","InfoModal","React","lazy","useStyles","makeStyles","theme","root","width","marginTop","padding","backgroundColor","palette","background","paper","margin","marginRight","PageContent","props","classes","useState","modalOpen","setModalOpen","modalData","setModalData","Avatar","avatar","toggleModalOpen","renderList","itemTitles","title","key","onClick","button","divider","className","primary","closeModal","component","aria-label","_interopRequireDefault","require","Object","defineProperty","exports","value","default","_react","_default","createElement","d","connect","actions","useEffect","movie","director","producers","release_date","TheatersIcon"],"mappings":"0HAAA,kKAYMA,EAAU,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAEzCC,EAAa,SAAAC,GAAO,OAAIF,EAAQG,KAAI,SAAAC,GAAK,OAAI,SAAAC,GACjDC,MAAM,wBAAD,OAAyBJ,EAAzB,YAAoCE,EAApC,KAA8C,CACjDG,OAAQ,MACRC,KAAM,OACNC,MAAO,UACPC,YAAa,OACbC,QAAS,CACP,eAAgB,oBAElBC,SAAU,QACVC,eAAgB,gBACfC,MAAK,SAAAC,GAAQ,OAvBG,SAAAA,GAInB,OAHKA,EAASC,IACZC,QAAQC,MAAMH,EAASI,YAElBJ,EAASK,OAmBIC,CAAaN,MAAWD,MAAK,SAACQ,EAAMJ,GAClDA,EAASD,QAAQC,MAAMA,GAAgBb,EAAS,KAAMiB,WAIjDC,EAAc,kBAAM,SAAAC,GAC/BC,IAASxB,EAAW,WAAW,SAACyB,EAAKC,GAC/BD,GAAOT,QAAQC,MAAMQ,GACzBF,EAAS,CAAEI,KAAM,eAAgBC,QAASF,SAIjCG,EAAe,kBAAM,SAAAN,GAChCC,IAASxB,EAAW,YAAY,SAACyB,EAAKC,GAChCD,GAAOT,QAAQC,MAAMQ,GACzBF,EAAS,CAAEI,KAAM,gBAAiBC,QAASF,SAIlCI,EAAc,kBAAM,SAAAP,GAC/BC,IAASxB,EAAW,UAAU,SAACyB,EAAKC,GAC9BD,GAAOT,QAAQC,MAAMQ,GACzBF,EAAS,CAAEI,KAAM,eAAgBC,QAASF,U,iCC3C/BK,IAJS,SAAC,GACvB,MAAO,CAAEC,OAD8C,EAA9BA,OACRC,QADsC,EAAtBA,QACPC,OAD6B,EAAbA,U,iGCKtCC,EAAYC,IAAMC,MAAK,kBAAM,iCAE7BC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,MAAO,OACPC,UAAW,OACXC,QAAS,IACTC,gBAAiBL,EAAMM,QAAQC,WAAWC,OAE5CC,OAAQ,CACNC,YAAa,YA2CFC,IAvCK,SAAAC,GAClB,IAAMC,EAAUf,IADW,EAEOgB,oBAAS,GAFhB,mBAEpBC,EAFoB,KAETC,EAFS,OAGOF,mBAAS,MAHhB,mBAGpBG,EAHoB,KAGTC,EAHS,KAIrBC,EAASP,EAAMQ,OACfC,EAAkB,WAAQL,GAAcD,IAKxCO,EAAaV,EAAMW,WAAW7D,KAAI,SAAC8D,EAAO7D,GAC9C,OACE,yBAAK8D,IAAKD,EAAOE,QAAS,kBANV7C,EAM4B+B,EAAMK,UAAUtD,GAL9D0D,SACAH,EAAarC,GAFK,IAAAA,IAOd,kBAAC,IAAD,CAAU8C,QAAM,EAACC,SAAO,GACtB,kBAACT,EAAD,CAAQU,UAAWhB,EAAQJ,SAC3B,kBAAC,IAAD,CAAcqB,QAASN,SAM/B,OACE,oCAEIT,GACE,kBAACpB,EAAD,CAAWsB,UAAWA,EAAWc,WAAYV,IAGjD,kBAAC,IAAD,CACEW,UAAU,MACVH,UAAWhB,EAAQZ,KACnBgC,aAAW,mBAEVX,M,iCClDT,IAAIY,EAAyBC,EAAQ,IAErCC,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAElB,IAAIC,EAASP,EAAuBC,EAAQ,IAIxCO,GAAW,EAFMR,EAAuBC,EAAQ,KAElBK,SAASC,EAAOD,QAAQG,cAAc,OAAQ,CAC9EC,EAAG,+IACD,YAEJN,EAAQE,QAAUE,G,iCCjBlB,wFAuDeG,sBAAQtD,IAAiBuD,EAAzBD,EA/CI,SAAAjC,GACjBmC,qBAAU,WACHnC,EAAMlB,QACTkB,EAAMtB,gBAEP,CAACsB,IAEJ,IAAMK,EAAYL,EAAMlB,OACpBkB,EAAMlB,OAAOhC,KAAI,SAAAsF,GACjB,MAAQ,CACN,CACExB,MAAO,QACPe,MAAOS,EAAMxB,OAEf,CACEA,MAAO,WACPe,MAAOS,EAAMC,UAEf,CACEzB,MAAO,YACPe,MAAOS,EAAME,WAEf,CACE1B,MAAO,eACPe,MAAOS,EAAMG,kBAIjB,KAEE5B,EAAaX,EAAMlB,OACrBkB,EAAMlB,OAAOhC,KAAI,SAAAsF,GACjB,OAAOA,EAAMxB,SAEb,KAUJ,OARaZ,EAAMlB,OACf,kBAAC,IAAD,CACAuB,UAAWA,EACXM,WAAYA,EACZH,OAAQgC,MAER,kBAAC,IAAD","file":"static/js/4.eb118ade.chunk.js","sourcesContent":["import parallel from 'async/parallel'\r\n\r\nconst handleErrors = response => {\r\n  if (!response.ok) {\r\n    console.error(response.statusText)\r\n  }\r\n  return response.json()\r\n}\r\n\r\n// the following is in place to return a manageable batch size for each route\r\n// 'load more' functionality is outside the scope, so only a single batch is fetched\r\n// this is why graphql takes the trophy...\r\nconst indices = ['1', '2', '3', '4', '5', '6', '7']\r\n\r\nconst asyncfuncs = segment => indices.map(index => callback => {\r\n  fetch(`https://swapi.co/api/${segment}/${index}/`, {\r\n    method: 'GET',\r\n    mode: 'cors',\r\n    cache: 'default',\r\n    credentials: 'omit',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    redirect: 'error',\r\n    referrerPolicy: 'no-referrer'\r\n  }).then(response => handleErrors(response)).then((data, error) => {\r\n    if (error) { console.error(error) } else { callback(null, data) }\r\n  })\r\n})\r\n\r\nexport const fetchPeople = () => dispatch => {\r\n  parallel(asyncfuncs('people'), (err, results) => {\r\n    if (err) { console.error(err) }\r\n    dispatch({ type: 'fetch_people', payload: results })\r\n  })\r\n}\r\n\r\nexport const fetchPlanets = () => dispatch => {\r\n  parallel(asyncfuncs('planets'), (err, results) => {\r\n    if (err) { console.error(err) }\r\n    dispatch({ type: 'fetch_planets', payload: results })\r\n  })\r\n}\r\n\r\nexport const fetchMovies = () => dispatch => {\r\n  parallel(asyncfuncs('films'), (err, results) => {\r\n    if (err) { console.error(err) }\r\n    dispatch({ type: 'fetch_movies', payload: results })\r\n  })\r\n}\r\n","const MapStateToProps = ({ people, planets, movies }) => {\r\n  return { people, planets, movies }\r\n}\r\n\r\nexport default MapStateToProps\r\n","import React, { useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nconst InfoModal = React.lazy(() => import('./InfoModal'))\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n    marginTop: '64px',\r\n    padding: '0',\r\n    backgroundColor: theme.palette.background.paper\r\n  },\r\n  margin: {\r\n    marginRight: '15px'\r\n  }\r\n}))\r\n\r\nconst PageContent = props => {\r\n  const classes = useStyles()\r\n  const [modalOpen, setModalOpen] = useState(false)\r\n  const [modalData, setModalData] = useState(null)\r\n  const Avatar = props.avatar\r\n  const toggleModalOpen = () => { setModalOpen(!modalOpen) }\r\n  const renderModal = data => {\r\n    toggleModalOpen()\r\n    setModalData(data)\r\n  }\r\n  const renderList = props.itemTitles.map((title, index) => {\r\n    return (\r\n      <div key={title} onClick={() => renderModal(props.modalData[index])}>\r\n        <ListItem button divider>\r\n          <Avatar className={classes.margin} />\r\n          <ListItemText primary={title} />\r\n        </ListItem>\r\n      </div>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <>\r\n      {\r\n        modalOpen && (\r\n          <InfoModal modalData={modalData} closeModal={toggleModalOpen} />\r\n        )\r\n      }\r\n      <List\r\n        component='nav'\r\n        className={classes.root}\r\n        aria-label='mailbox folders'\r\n      >\r\n        {renderList}\r\n      </List>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PageContent\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M18 3v2h-2V3H8v2H6V3H4v18h2v-2h2v2h8v-2h2v2h2V3h-2zM8 17H6v-2h2v2zm0-4H6v-2h2v2zm0-4H6V7h2v2zm10 8h-2v-2h2v2zm0-4h-2v-2h2v2zm0-4h-2V7h2v2z\"\n}), 'Theaters');\n\nexports.default = _default;","import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from '../actions'\r\nimport MapStateToProps from './MapStateToProps'\r\nimport PageContent from './PageContent'\r\nimport LoadingSpinner from './LoadingSpinner'\r\nimport TheatersIcon from '@material-ui/icons/Theaters'\r\n\r\nconst MoviesPage = props => {\r\n  useEffect(() => {\r\n    if (!props.movies) {\r\n      props.fetchMovies()\r\n    }\r\n  }, [props])\r\n\r\n  const modalData = props.movies\r\n    ? props.movies.map(movie => {\r\n      return ([\r\n        {\r\n          title: 'Movie',\r\n          value: movie.title\r\n        },\r\n        {\r\n          title: 'Director',\r\n          value: movie.director\r\n        },\r\n        {\r\n          title: 'Producers',\r\n          value: movie.producers\r\n        },\r\n        {\r\n          title: 'Release Date',\r\n          value: movie.release_date\r\n        }\r\n      ])\r\n    })\r\n    : null\r\n\r\n  const itemTitles = props.movies\r\n    ? props.movies.map(movie => {\r\n      return movie.title\r\n    })\r\n    : null\r\n\r\n  const page = props.movies\r\n    ? <PageContent\r\n      modalData={modalData}\r\n      itemTitles={itemTitles}\r\n      avatar={TheatersIcon}\r\n    />\r\n    : <LoadingSpinner />\r\n\r\n  return page\r\n}\r\n\r\nexport default connect(MapStateToProps, actions)(MoviesPage)\r\n"],"sourceRoot":""}